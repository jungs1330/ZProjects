<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ColumnAndRowCountBiggerThan0" xml:space="preserve">
    <value>Column and row count must be larger than 0.</value>
  </data>
  <data name="ComparingNullObject" xml:space="preserve">
    <value>The object to compare against is null.</value>
  </data>
  <data name="DequeIsEmpty" xml:space="preserve">
    <value>The deque is empty.</value>
  </data>
  <data name="EdgeAllreadyExists" xml:space="preserve">
    <value>The edge between the vertices specified allready exists.</value>
  </data>
  <data name="EdgeNotFoundOnVertex" xml:space="preserve">
    <value>The edge specified was not found on this vertex.</value>
  </data>
  <data name="GraphIsEmpty" xml:space="preserve">
    <value>The graph is empty.</value>
  </data>
  <data name="HeapIsEmpty" xml:space="preserve">
    <value>The heap is empty.</value>
  </data>
  <data name="IncompatibleMatricesSameSize" xml:space="preserve">
    <value>Incompatible matrices.  For this operation the matrices should be of the same size.</value>
  </data>
  <data name="IncompatibleMatricesTimes" xml:space="preserve">
    <value>Incompatible matrices for this operation.  The rows of the input matrix must be equal to the columns of this matrix.</value>
  </data>
  <data name="InitialValuesNull" xml:space="preserve">
    <value>Initial values can not be null.</value>
  </data>
  <data name="InvalidOperationWrongMatrixType" xml:space="preserve">
    <value>This operation can not be done on the type of matrix specified.</value>
  </data>
  <data name="InvalidProbability" xml:space="preserve">
    <value>The probability must be between 0.1 and 0.9</value>
  </data>
  <data name="ItemAllreadyInTree" xml:space="preserve">
    <value>The item is allready contained in the tree.</value>
  </data>
  <data name="ItemAlreadyInList" xml:space="preserve">
    <value>The item is allready in the list.</value>
  </data>
  <data name="ItemNotInUniverse" xml:space="preserve">
    <value>The item is not in the universe of the set.</value>
  </data>
  <data name="KeyAllreadyExists" xml:space="preserve">
    <value>The key specified is allready in the collection.</value>
  </data>
  <data name="KeyDoesNotExist" xml:space="preserve">
    <value>The key does not exist in the list.</value>
  </data>
  <data name="LowerBoundLargerThanZero" xml:space="preserve">
    <value>The lower bound must be larger or equal to zero.</value>
  </data>
  <data name="MatrixIsNull" xml:space="preserve">
    <value>Matrix is null.</value>
  </data>
  <data name="MaximumLevelBiggerThan0" xml:space="preserve">
    <value>The maximum level must be bigger than 0.</value>
  </data>
  <data name="MismatchedEdgeType" xml:space="preserve">
    <value>The type of edge must be the same as the type of graph (Undirected / Directed)</value>
  </data>
  <data name="NotEnoughSpaceInTargetArray" xml:space="preserve">
    <value>Not enough space in the target array.</value>
  </data>
  <data name="NumberOfValuesDoNotAgreeWithNumberOfColumns" xml:space="preserve">
    <value>The number of values can not be greater than the number of columns.</value>
  </data>
  <data name="NumberOfValuesDoNotAgreeWithNumberOfRows" xml:space="preserve">
    <value>The number of values can not be greater than the number of rows.</value>
  </data>
  <data name="NumbersGreaterThanZero" xml:space="preserve">
    <value>Numbers provided must be greater than zero.</value>
  </data>
  <data name="OnlyAddPositiveAmount" xml:space="preserve">
    <value>You can only add 1 or more items.</value>
  </data>
  <data name="RowsOrColumnsInvalid" xml:space="preserve">
    <value>Rows and columns must be nonnegative values.</value>
  </data>
  <data name="SearchTreeIsEmpty" xml:space="preserve">
    <value>The search tree is empty.</value>
  </data>
  <data name="SetIndexMustBePostive" xml:space="preserve">
    <value>The index of an item in a set can not be negative.</value>
  </data>
  <data name="UndirectedGraphStrongConnectedness" xml:space="preserve">
    <value>This operation is only valid on a directed graph. For undirected graphs, rather test for weak connectedness.</value>
  </data>
  <data name="UniverseNotTheSame" xml:space="preserve">
    <value>The operation requested can only be done if the sets share the same universe.</value>
  </data>
  <data name="UpperBoundMustBeLargerThanLowerBound" xml:space="preserve">
    <value>The upper bound must be larger than the lower bound specified.</value>
  </data>
  <data name="VertexAlreadyExists" xml:space="preserve">
    <value>The vertex already exists in the graph.</value>
  </data>
  <data name="VertexCouldNotBeFound" xml:space="preserve">
    <value>The vertex specified could not be found in the graph.</value>
  </data>
  <data name="VertexNotPartOfEdge" xml:space="preserve">
    <value>The vertex specified does not form part of this edge.</value>
  </data>
  <data name="XMustBeLargerThanY" xml:space="preserve">
    <value>x must be larger than or equal to y.</value>
  </data>
</root>